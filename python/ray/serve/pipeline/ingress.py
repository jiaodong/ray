from multiprocessing.sharedctypes import Value
from typing import Optional, Callable, Union
import starlette

from ray._private.utils import import_attr
from ray.experimental.dag import DAGNode
from ray.serve.pipeline.input_schema import InputSchemaBase
from ray.serve.utils import parse_import_path
from importlib import import_module


class Ingress:
    """User facing HTTP component of a serve pipeline. Generated by default.
    """
    def __init__(
        self,
        serve_dag_node_json: str,
        # Module or import_path of module
        input_schema_import_path: Optional[str] = None,
    ):
        import json
        from ray.serve.pipeline.json_serde import dagnode_from_json

        self.dag: DAGNode = json.loads(serve_dag_node_json, object_hook=dagnode_from_json)
        print(f"self.dag: {str(self.dag)}")
        print(f"<<<<< input_schema_import_path: {input_schema_import_path}")
        if input_schema_import_path:
            if isinstance(input_schema_import_path, str):
                module_name, attr_name = parse_import_path(input_schema_import_path)
                self.input_schema = getattr(import_module(module_name), attr_name)
            else:
                raise ValueError("Invalid input schema type, has to be import path as str.")

    async def __call__(self, request: starlette.requests.Request):
        body = await request.body()
        if self.input_schema:
            user_input_python = self.input_schema.convert(body)
            return await self.dag.execute(user_input_python)
        else:
            return await self.dag.execute(body)